# The queries below are in reverse order of how they were originally created
# Therefore, the most complex ones come first
# Note that some lines have been commented out of some queries
#    There may be two different queries that can be run by changing what is commented
#    There may be functionality that is not yet supported in the ontology



### enable-GeoSPARQL ###
# Enables the GeoSPARQL plugin in GraphDB so indexed predicate operations work

PREFIX geoSparql: <http://www.ontotext.com/plugins/geosparql#>

INSERT DATA { [] geoSparql:enabled "true" . }



### Preprocess flooded RiskPoints ###
# Find all UtilityAssets with riskpoints that have flood level data
#    Check if minNonZero (flood depth) > criticalDepth
#    If so, write new triple setting the flood level data as a CriticalFloodObservation

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_fl: <http://schema.ufokn.org/flood/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>

INSERT {
	GRAPH <http://schema.ufokn.org/example/ufokn_cincinnati_CritFloodObs> {
		?floodObs rdf:type ufokn_fl:CriticalFloodObservation .
	}
}
WHERE {
    ?utilityAsset rdf:type ufokn_c:UtilityAsset .
    ?utilityAsset ufokn:hasRiskPoint ?riskpoint .
    ?riskpoint ufokn_fl:hasFloodLevelObservation ?floodObs .
    ?floodObs ufokn_fl:minNonZero ?floodDepth .
    ?riskpoint ufokn:criticalDepth ?critDepth .
    FILTER(?floodDepth > ?critDepth)
}



### Find flooded utility assets and flood-affected utility assets, then cascade to features
# Find all flooded utility assets
# Add all flood-affected utility assets
# Find all features directly affected by any flood or flood-affected utility asset
# For each feature:
#    Identify a root cause (only one, not all)
#    Identify a local cause (may be the same or different, may not be the only one)
#    Add identifying and locational information
#    Add flood data if the feature is flooded

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX ufokn_fl: <http://schema.ufokn.org/flood/v2/>

SELECT ?far ?uid ?key ?value ?utilityAsset ?uawkt ?rootasset ?rootwkt ?streetnum ?street ?city ?state ?zip ?wkt ?minnonzero ?maxdepth ?firstfloodtime ?maxfloodtime WHERE
{ 
    { SELECT ?utilityAsset WHERE 
        {
            ?utilityAsset rdf:type ufokn_c:UtilityAsset .
            ?utilityAsset ufokn:hasRiskPoint ?riskpoint .
            ?riskpoint ufokn_fl:hasFloodLevelObservation ?floodObs .
            ?floodObs rdf:type ufokn_fl:CriticalFloodObservation .
        }
    }
    UNION
    { SELECT ?utilityAsset WHERE 
        {
            ?floodedAsset rdf:type ufokn_c:UtilityAsset .
            ?floodedAsset ufokn:hasRiskPoint ?riskpoint .
            ?riskpoint ufokn_fl:hasFloodLevelObservation ?floodObs .
            ?floodObs rdf:type ufokn_fl:CriticalFloodObservation .

            ?utilityAsset rdf:type ufokn_c:UtilityAsset .
            ?floodedAsset ufokn_c:assetCriticallyServesTC ?utilityAsset .
        }
    }
    
    ?utilityAsset ufokn_c:assetOfTypeRequiredBy ?far .
    ?utilityAsset ufokn_c:assetCriticallyServes ?far .
    ?utilityAsset ufokn:hasRiskPoint ?uariskpoint .
    ?uariskpoint geo:asWKT ?uawkt .
    
    ?rootasset rdf:type ufokn_c:UtilityAsset .
    ?rootasset ufokn_c:assetCriticallyServesTC ?utilityAsset .
   	
    ?rootasset ufokn:hasRiskPoint ?rootriskpoint .
    ?rootriskpoint geo:asWKT ?rootwkt .
    ?rootriskpoint ufokn_fl:hasFloodLevelObservation ?floodObs .
    
    ?far ufokn:id ?uid .
    ?far ufokn:key ?key .
    ?far ufokn:value ?value .
    ?far ufokn:hasAddress ?address .
    ?address ufokn:streetNumber ?streetnum .
    ?address ufokn:street ?street .
    ?address ufokn:city ?city .
    ?address ufokn:state ?state .
    ?address ufokn:postcode ?zip .
    ?far ufokn:hasRiskPoint ?rp .
    ?rp geo:asWKT ?wkt .
    OPTIONAL
    {
        ?rp ufokn_fl:hasFloodLevelObservation ?floodlevel .
        ?floodlevel ufokn_fl:firstFloodTime ?firstfloodtime .
        ?floodlevel ufokn_fl:minNonZero ?minnonzero .
        ?floodlevel ufokn_fl:maxFloodTime ?maxfloodtime .
        ?floodlevel ufokn_fl:maxDepth ?maxdepth .
    }
} GROUP BY ?far ?uid ?key ?value ?utilityAsset ?uawkt ?rootasset ?rootwkt ?streetnum ?street ?city ?state ?zip ?wkt ?minnonzero ?maxdepth ?firstfloodtime ?maxfloodtime
 




### Find affected assets, features, and data (OLD version) ###
# Find all utility assets affected by the flood
# Find all features affected by those utility assets (finds too many?)
# Attach data to everything, including
#    type of service that is out at a feature
#    corresponding asset that is out
#    root cause asset causing outage
# This query does not use isCriticallyOutRoot or isCriticallyOut

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX ufokn_fl: <http://schema.ufokn.org/flood/v2/>

SELECT ?far ?uid ?key ?value ?type ?utilityAsset ?uawkt ?rootasset ?rootwkt ?streetnum ?street ?city ?state ?zip ?wkt ?minnonzero ?maxdepth ?firstfloodtime ?maxfloodtime WHERE
{ 
    { SELECT ?utilityAsset WHERE 
        {
            ?utilityAsset rdf:type ufokn_c:UtilityAsset .
            ?utilityAsset ufokn:hasRiskPoint ?riskpoint .
            ?riskpoint ufokn_fl:hasFloodLevelObservation ?floodObs .
            ?floodObs ufokn_fl:minNonZero ?floodDepth .
            ?riskpoint ufokn:criticalDepth ?critDepth .
            FILTER(?floodDepth > ?critDepth)
        }
    }
    UNION
    { SELECT ?utilityAsset WHERE 
        {
            ?floodedAsset rdf:type ufokn_c:UtilityAsset .
            ?floodedAsset ufokn:hasRiskPoint ?riskpoint .
            ?riskpoint ufokn_fl:hasFloodLevelObservation ?floodObs .
            ?floodObs ufokn_fl:minNonZero ?floodDepth .
            ?riskpoint ufokn:criticalDepth ?critDepth .
            FILTER(?floodDepth > ?critDepth)
            
            ?floodedAsset ufokn_c:assetServesTC ?utilityAsset .
            ?utilityAsset rdf:type ufokn_c:UtilityAsset .
        }
    }
    
    ?utilityAsset ufokn_c:providesUtilityService ?service .
    ?service ufokn_c:ofUtilityType ?type .
    ?utilityAsset ufokn_c:assetServes ?far .
    ?far ufokn_c:requiresUtilityType ?type .
#    ?far rdf:type ufokn_c:MedicalUtilityAsset.
    ?utilityAsset ufokn:hasRiskPoint ?uariskpoint .
    ?uariskpoint geo:asWKT ?uawkt .
    
    ?rootasset ufokn_c:assetServesTC ?utilityAsset .
    ?rootasset ufokn_c:providesUtilityService ?rootservice .
    ?rootservice ufokn_c:ofUtilityType ?roottype .
    ?utilityAsset ufokn_c:requiresUtilityType ?roottype .
   	?rootasset rdf:type ufokn_c:UtilityAsset .
    ?rootasset ufokn:hasRiskPoint ?rootriskpoint .
    ?rootriskpoint geo:asWKT ?rootwkt .
    ?rootriskpoint ufokn_fl:hasFloodLevelObservation ?floodObs .
    ?floodObs ufokn_fl:minNonZero ?floodDepth .
    ?rootriskpoint ufokn:criticalDepth ?critDepth .
    FILTER(?floodDepth > ?critDepth)
    
    ?far ufokn:id ?uid .
    ?far ufokn:key ?key .
    ?far ufokn:value ?value .
    ?far ufokn:hasAddress ?address .
    ?address ufokn:streetNumber ?streetnum .
    ?address ufokn:street ?street .
    ?address ufokn:city ?city .
    ?address ufokn:state ?state .
    ?address ufokn:postcode ?zip .
    ?far ufokn:hasRiskPoint ?rp .
    ?rp geo:asWKT ?wkt .
    OPTIONAL
    {
        ?rp ufokn_fl:hasFloodLevelObservation ?floodlevel .
        ?floodlevel ufokn_fl:firstFloodTime ?firstfloodtime .
        ?floodlevel ufokn_fl:minNonZero ?minnonzero .
        ?floodlevel ufokn_fl:maxFloodTime ?maxfloodtime .
        ?floodlevel ufokn_fl:maxDepth ?maxdepth .
    }
} GROUP BY ?far ?uid ?key ?value ?type ?utilityAsset ?uawkt ?rootasset ?rootwkt ?streetnum ?street ?city ?state ?zip ?wkt ?minnonzero ?maxdepth ?firstfloodtime ?maxfloodtime



### Preprocess Critically Out (not-flooded) Assets ###
# Find all utility assets served by flooded utility assets
#    Set isCriticallyOut to true
#    Write appropriate ?utilityAsset ufokn_c:isCriticallyOut "true"^^xsd:boolean triples to a graph

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX ufokn_fl: <http://schema.ufokn.org/flood/v2/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
	GRAPH <http://schema.ufokn.org/example/ufokn_cincinnati_CRITOUT> {
		?utilityAsset ufokn_c:isCriticallyOut "true"^^xsd:boolean .
	}
}
WHERE {
	?floodedAsset rdf:type ufokn_c:UtilityAsset .
    ?floodedAsset ufokn_c:isCriticallyOutRoot "true"^^xsd:boolean .
    ?floodedAsset ufokn_c:assetServesTC ?utilityAsset .
    ?utilityAsset rdf:type ufokn_c:UtilityAsset .
}



### Preprocess Critically Flooded Root Assets ###
# Find all flooded utility assets
#    Set isCriticallyOutRoot to true if minNonZero exceeds critical depth
#    Write appropriate ?utilityAsset ufokn_c:isCriticallyOutRoot "true"^^xsd:boolean triples to a new graph

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX ufokn_fl: <http://schema.ufokn.org/flood/v2/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
	GRAPH <http://schema.ufokn.org/example/ufokn_cincinnati_CRITOUT> {
		?utilityAsset ufokn_c:isCriticallyOutRoot "true"^^xsd:boolean .
	}
}
WHERE {
	?utilityAsset rdf:type ufokn_c:UtilityAsset .
    ?utilityAsset ufokn:hasRiskPoint ?riskpoint .
    ?riskpoint ufokn_fl:hasFloodLevelObservation ?floodObs .
    ?floodObs ufokn_fl:minNonZero ?floodDepth .
    ?riskpoint ufokn:criticalDepth ?critDepth .
    FILTER(?floodDepth > ?critDepth)
}



### requiresUtilityType ###
# Returns UtilityAsset serving FeatureAtRisk where UtilityAsset ofUtilityType and FeatureAtRisk requiresUtilityType

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>

SELECT * WHERE
{ 
    ?asset rdf:type ufokn_c:UtilityAsset .
    ?asset ufokn_c:assetServes ?far .
    ?asset ufokn_c:ofUtilityType ?utiltype .
    ?far ufokn_c:requiresUtilityType ?utiltype .
}



### Find affected assets and data ###
# Find all utility assets with flood data and find all utility assets served by the flooded assets
# Attach data to each utility asset

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX ufokn_fl: <http://schema.ufokn.org/flood/v2/>

SELECT ?asset ?type ?uid ?key ?value ?minnonzero ?maxdepth ?firstfloodtime ?maxfloodtime ?streetnum ?street ?city ?state ?zip ?wkt WHERE
{ 
    { SELECT ?asset WHERE 
        { 	?asset rdf:type ufokn_c:UtilityAsset .
          	?asset ufokn:hasRiskPoint ?rpfa .
          	?rpfa ufokn_fl:hasFloodEvent ?floodevent .
        } GROUP BY ?asset
    }
    UNION
    { SELECT ?asset WHERE 
        {	?floodedasset rdf:type ufokn_c:UtilityAsset .
          	?floodedasset ufokn:hasRiskPoint ?rpfa .
          	?rpfa ufokn_fl:hasFloodEvent ?floodevent .
          	?floodedasset ufokn_c:assetServesTC ?asset .
          	?asset rdf:type ufokn_c:UtilityAsset .
        } GROUP BY ?asset
    }
    ?asset ufokn_c:providesUtilityService ?service .
    ?service ufokn_c:ofUtilityType ?type .
    ?asset ufokn:id ?uid .
    ?asset ufokn:key ?key .
    ?asset ufokn:value ?value .
    ?asset ufokn:hasAddress ?address .
    ?address ufokn:streetNumber ?streetnum .
    ?address ufokn:street ?street .
    ?address ufokn:city ?city .
    ?address ufokn:state ?state .
    ?address ufokn:postcode ?zip .
    ?asset ufokn:hasRiskPoint ?rp .
    ?rp geo:asWKT ?wkt .
    OPTIONAL
    {   ?rp ufokn_fl:hasFloodEvent ?floodevent .
        ?floodevent ufokn_fl:firstFloodTime ?firstfloodtime .
        ?floodevent ufokn_fl:minNonZero ?minnonzero .
        ?floodevent ufokn_fl:maxFloodTime ?maxfloodtime .
        ?floodevent ufokn_fl:maxDepth ?maxdepth .
    }
} GROUP BY ?asset ?type ?uid ?key ?value ?minnonzero ?maxdepth ?firstfloodtime ?maxfloodtime ?wkt ?streetnum ?street ?city ?state ?zip



### Find affected assets ###
# Find all utility assets with flood data and find all utility assets served by the flooded assets
# No data is attached - this is the core of the query above

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX ufokn_fl: <http://schema.ufokn.org/flood/v2/>

SELECT ?asset WHERE
{ 
    { SELECT ?asset WHERE 
        {	?asset rdf:type ufokn_c:UtilityAsset .
            ?asset ufokn:hasRiskPoint ?rpfa .
            ?rpfa ufokn_fl:hasFloodEvent ?floodevent .
        } GROUP BY ?asset
    }
    UNION
    {	SELECT ?asset WHERE 
        {	?floodedasset rdf:type ufokn_c:UtilityAsset .
            ?floodedasset ufokn:hasRiskPoint ?rpfa .
            ?rpfa ufokn_fl:hasFloodEvent ?floodevent .
            ?floodedasset ufokn_c:assetServesTC ?asset .
            ?asset rdf:type ufokn_c:UtilityAsset .
        } GROUP BY ?asset
    }
} GROUP BY ?asset



### Preprocess UtilityServiceAreas ###
# Find all features in UtilityServiceAreas
#    Including any UtilityAssets
#    Write appropriate ?service ufokn_c:serves ?feature triples to a new graph

PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

INSERT {
	GRAPH <http://schema.ufokn.org/example/ufokn_cincinnati_SERVES> {
		?service ufokn_c:serves ?feature .
	}
}
WHERE {
    ?servicearea rdf:type ufokn_c:UtilityServiceArea .
	?service ufokn_c:servesArea ?servicearea .
    ?servicearea geo:sfIntersects ?riskpoint .
    ?feature ufokn:hasRiskPoint ?riskpoint .
}



### Preprocess ElectricServiceAreas ###
# Find all features in ElectricServiceAreas
#    Including any UtilityAssets
#    Write appropriate ?service ufokn_c:serves ?feature triples to a new graph

PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

INSERT {
	GRAPH <http://schema.ufokn.org/example/Cincinnati-SERVES> {
		?service ufokn_c:serves ?feature .
	}
}
WHERE {
    ?servicearea rdf:type ufokn_c:ElectricServiceArea .
	?service ufokn_c:servesArea ?servicearea .
    ?servicearea geo:sfIntersects ?riskpoint .
    ?feature ufokn:hasRiskPoint ?riskpoint .
}



### Preprocess MedicalServiceAreas ###
# Find all features in MedicalServiceAreas
#    Excluding any UtilityAssets
#    Write appropriate ?service ufokn_c:serves ?feature triples to a new graph

PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

INSERT {
	GRAPH <http://schema.ufokn.org/example/Cincinnati-SERVES> {
		?service ufokn_c:serves ?feature .
	}
}
WHERE {
    ?servicearea rdf:type ufokn_c:MedicalServiceArea .
	?service ufokn_c:servesArea ?servicearea .
    ?servicearea geo:sfIntersects ?riskpoint .
    ?feature ufokn:hasRiskPoint ?riskpoint .
    FILTER NOT EXISTS {
        ?feature rdf:type ufokn_c:UtilityAsset .
    }
}



### Preprocess CommunicationServiceAreas ###
# Find all features in CommunicationServiceAreas
#    Excluding any UtilityAssets
#    Write appropriate ?service ufokn_c:serves ?feature triples to a new graph

PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

INSERT {
	GRAPH <http://schema.ufokn.org/example/Cincinnati-SERVES> {
		?service ufokn_c:serves ?feature .
	}
}
WHERE {
    ?servicearea rdf:type ufokn_c:CommunicationServiceArea .
	?service ufokn_c:servesArea ?servicearea .
    ?servicearea geo:sfIntersects ?riskpoint .
    ?feature ufokn:hasRiskPoint ?riskpoint .
    FILTER NOT EXISTS {
        ?feature rdf:type ufokn_c:UtilityAsset .
    }
}



### Preprocess WaterServiceAreas ###
# Find all features in WaterServiceAreas
#    Excluding any CommunicationUtilityAssets or ElectricUtilityAssets
#    Write appropriate ?service ufokn_c:serves ?feature triples to a new graph

PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

INSERT {
	GRAPH <http://schema.ufokn.org/example/Cincinnati-SERVES> {
		?service ufokn_c:serves ?feature .
	}
}
WHERE {
    ?servicearea rdf:type ufokn_c:WaterServiceArea .
	?service ufokn_c:servesArea ?servicearea .
    ?servicearea geo:sfIntersects ?riskpoint .
    ?feature ufokn:hasRiskPoint ?riskpoint .
    MINUS {
        ?feature rdf:type ufokn_c:CommunicationUtilityAsset .
    }
    MINUS {
		?feature rdf:type ufokn_c:ElectricUtilityAsset .
    }
}



### Look for duplicate UFOKN-IDs ###
# Returns each UFOKN-ID and its COUNT if there are more than 1

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

SELECT ?uid (COUNT(?uid) as ?count) WHERE {
    ?far rdf:type ufokn:FeatureAtRisk .
    ?far ufokn:id ?uid .
}
GROUP BY ?uid
HAVING(?count > 1)



### COUNT FaRs served by utility assets ###
# Counts the number of FaRs (including utility assets) served by each utility asset

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>

SELECT ?utilAsset1 (COUNT(?feature) as ?COUNT)  WHERE { 
	?utilAsset1 ufokn_c:assetServesTC ?feature .
    ?feature rdf:type ufokn:FeatureAtRisk .
} GROUP BY ?utilAsset1 ORDER BY ?utilAsset1



### Find FaRs served by specific asset ###
# Returns all FaRs served by a specific UtilityAsset

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX ufokn_data: <http://schema.ufokn.org/example/UtilityAsset>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>

SELECT ?far ?rp ?wkt WHERE { 
	<ufokn_data:UtilityAsset/MedicalAsset-dngywt01fgvf> ufokn_c:assetServesTC ?far .
    ?far ufokn:hasRiskPoint ?rp .
    ?rp geo:asWKT ?wkt .
} GROUP BY ?far ?rp ?wkt



### Find everything affected by a flood ###
# Returns all FaRs affected in anyway (transitively) by flooded assets
#    Currently, the results are the same for assetServes and for assetServesTC
#    The query only allows assets with flood data and ignores all others, overriding the cascades

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX ufokn_data: <http://schema.ufokn.org/example/UtilityAsset>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX ufokn_fl: <http://schema.ufokn.org/flood/v2/>

SELECT ?far ?key ?value ?wkt WHERE { 
    ?asset rdf:type ufokn_c:UtilityAsset .
    ?asset ufokn:hasRiskPoint ?rpa .
    ?rpa ufokn_fl:hasFloodEvent ?floodevent .
    
	?asset ufokn_c:assetServesTC ?far .
    
    ?far ufokn:key ?key .
    ?far ufokn:value ?value .
    ?far ufokn:hasRiskPoint ?rpf .
    ?rpf geo:asWKT ?wkt .
} GROUP BY ?far ?key ?value ?wkt



### Utility Assets/Services with Flood Data ###
# Find all utility services with utility asset risk points that have flood data

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX ufokn_fl: <http://schema.ufokn.org/flood/v2/>

SELECT ?utilasset ?service WHERE {
	?utilasset rdf:type ufokn_c:UtilityAsset .
    ?utilasset ufokn:hasRiskPoint ?rpua .
    ?utilasset ufokn_c:providesUtilityService ?service .
    ?rpua ufokn_fl:hasFloodEvent ?floodevent .
} GROUP BY ?utilasset ?service



### FaR in Flooded UtilityAsset ServiceArea ###
# See comments within the query
#    It is easily restricted to a specific type of UtilityService
#    Specific types of features can be specified using key and/or value triples
# Note: there are no cascades to affected services outside the flood zone

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX ufokn_fl: <http://schema.ufokn.org/flood/v2/>

SELECT ?far ?service WHERE {
    # Find utility assets that are in the flood zone
	?utilasset rdf:type ufokn_c:UtilityAsset .
    ?utilasset ufokn:hasRiskPoint ?rpua .
    ?rpua ufokn_fl:hasFloodEvent ?floodevent .
    
    # Find the service areas for all utility assets in the flood zone
    ?utilasset ufokn_c:providesUtilityService ?service .
#    ?utilasset ufokn_c:ofUtilityType ufokn_c:MedicalService .
    ?service ufokn_c:servesArea ?area .
    
    # Find features at risk within the affected service areas
    ?far rdf:type ufokn:FeatureAtRisk .
#	 ?far ufokn:value 'hospital' .
    ?far ufokn:hasRiskPoint ?rpfar .
    ?area geo:sfIntersects ?rpfar .
} GROUP BY ?far ?service



### FaR maxFloodTime ###
# Retrieves all riskpoints with flood data:
#    firstFloodTiime, minNonZero, maxFloodTime, maxDepth

PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_fl: <http://schema.ufokn.org/flood/v2/>

SELECT ?riskpoint ?firsttime ?minnonzero ?maxtime ?maxdepth WHERE {
    ?floodevent ufokn_fl:firstFloodTime ?firsttime .
	?floodevent ufokn_fl:minNonZero ?minnonzero .
    ?floodevent ufokn_fl:maxFloodTime ?maxtime .
    ?floodevent ufokn_fl:maxDepth ?maxdepth .
    ?riskpoint ufokn_fl:hasFloodEvent ?floodevent .
	?far ufokn:hasRiskPoint ?riskpoint .
} ORDER BY ?firsttime ?minnonzero ?maxtime ?maxdepth



### Count assets served transitively by other assets ###
# Counts all UtilityAssets served (transitively) by other UtilityAssets

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>

SELECT ?utilAsset1 (COUNT(?utilAsset2) as ?count) WHERE { 
	?utilAsset1 ufokn_c:assetServesTC ?utilAsset2 .
    ?utilAsset2 rdf:type ufokn_c:UtilityAsset .
    FILTER(?utilAsset1 != ?utilAsset2) .
} GROUP BY ?utilAsset1 ORDER BY DESC(?count)



### assetServesTC-p2p ###
# Tests the new ufokn_c:assetServesTC transitive closure of ufokn_c:assetServes

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>

SELECT ?utilAsset ?feature WHERE { 
	?utilAsset ufokn_c:assetServesTC ?feature .
    ?feature rdf:type ufokn:FeatureAtRisk .
    FILTER(?utilAsset != ?feature)
} # GROUP BY ?utilAsset ?feature



### assetServes-p2p ###
# Tests the new ufokn_c:assetServes propertyChainAxiom

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>

SELECT ?utilAsset1 ?feature WHERE { 
	?utilAsset1 ufokn_c:assetServes ?feature .
    ?feature rdf:type ufokn:FeatureAtRisk .
}



### 5 Step Cascade ###
# A cascading query: UA --> UA --> UA --> UA --> UA --> FaR
# Superseded by ability to use assetServesTC

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>

SELECT ?utilAsset1 ?utilAsset2 ?utilAsset3 ?utilAsset4 ?utilAsset5 ?feature WHERE { 
	?utilAsset1 ufokn_c:providesUtilityService ?utilServ1 .  
	?utilServ1 ufokn_c:serves ?utilAsset2 .
    ?utilAsset2 ufokn_c:providesUtilityService ?utilServ2 .
    ?utilServ2 ufokn_c:serves ?utilAsset3 .
    ?utilAsset3 ufokn_c:providesUtilityService ?utilServ3 .
    ?utilServ3 ufokn_c:serves ?utilAsset4 .
    ?utilAsset4 ufokn_c:providesUtilityService ?utilServ4 .
    ?utilServ4 ufokn_c:serves ?utilAsset5 .
    ?utilAsset5 ufokn_c:providesUtilityService ?utilServ5 .
    ?utilServ5 ufokn_c:serves ?feature .
    ?feature rdf:type ufokn:FeatureAtRisk .
    FILTER(?utilAsset1 != ?utilAsset2)
    FILTER(?utilAsset2 != ?utilAsset3)
    FILTER(?utilAsset3 != ?utilAsset4)
    FILTER(?utilAsset4 != ?utilAsset5)
    FILTER(?utilAsset5 != ?feature)
} GROUP BY ?utilAsset1 ?utilAsset2 ?utilAsset3 ?utilAsset4 ?utilAsset5 ?feature




### 4 Step Cascade ###
# A cascading query: UA --> UA --> UA --> UA --> FaR
# Superseded by ability to use assetServesTC

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>

SELECT ?utilAsset1 ?utilAsset2 ?utilAsset3 ?utilAsset4 ?feature WHERE { 
	?utilAsset1 ufokn_c:providesUtilityService ?utilServ1 .  
	?utilServ1 ufokn_c:serves ?utilAsset2 .
    ?utilAsset2 ufokn_c:providesUtilityService ?utilServ2 .
    ?utilServ2 ufokn_c:serves ?utilAsset3 .
    ?utilAsset3 ufokn_c:providesUtilityService ?utilServ3 .
    ?utilServ3 ufokn_c:serves ?utilAsset4 .
    ?utilAsset4 ufokn_c:providesUtilityService ?utilServ4 .
    ?utilServ4 ufokn_c:serves ?feature .
    ?feature rdf:type ufokn:FeatureAtRisk .
    FILTER(?utilAsset1 != ?utilAsset2)
    FILTER(?utilAsset2 != ?utilAsset3)
    FILTER(?utilAsset3 != ?utilAsset4)
    FILTER(?utilAsset4 != ?feature)
} GROUP BY ?utilAsset1 ?utilAsset2 ?utilAsset3 ?utilAsset4 ?feature



### 3 Step Cascade ###
# A cascading query: UA --> UA --> UA --> FaR
# Superseded by ability to use assetServesTC

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>

SELECT ?utilAsset1 ?utilAsset2 ?utilAsset3 ?feature WHERE { 
	?utilAsset1 ufokn_c:providesUtilityService ?utilServ1 .  
	?utilServ1 ufokn_c:serves ?utilAsset2 .
    ?utilAsset2 ufokn_c:providesUtilityService ?utilServ2 .
    ?utilServ2 ufokn_c:serves ?utilAsset3 .
    ?utilAsset3 ufokn_c:providesUtilityService ?utilServ3 .
    ?utilServ3 ufokn_c:serves ?feature .
    ?feature rdf:type ufokn:FeatureAtRisk .
    FILTER(?utilAsset1 != ?utilAsset2)
    FILTER(?utilAsset2 != ?utilAsset3)
    FILTER(?utilAsset3 != ?feature)
} GROUP BY ?utilAsset1 ?utilAsset2 ?utilAsset3 ?feature




### 2 Step Cascade ###
# A cascading query: UA --> UA --> FaR
# Superseded by ability to use assetServesTC

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>

SELECT ?utilAsset1 ?utilAsset2 ?feature WHERE { 
	?utilAsset1 rdf:type ufokn_c:UtilityAsset ;
                ufokn_c:providesUtilityService ?utilServ1 .  
	?utilServ1 ufokn_c:serves ?utilAsset2 .
    ?utilAsset2 ufokn_c:providesUtilityService ?utilServ2 .
    ?utilServ2 ufokn_c:serves ?feature .
    ?feature rdf:type ufokn:FeatureAtRisk .
    FILTER(?utilAsset1 != ?utilAsset2)
    FILTER(?utilAsset2 != ?feature)
} GROUP BY ?utilAsset1 ?utilAsset2 ?feature



### 1 Step Cascade ###
# Just looks from UA --> FaR with nothing in between

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>

SELECT ?utilAsset1 ?feature WHERE { 
	?utilAsset1 rdf:type ufokn_c:UtilityAsset ;
                ufokn_c:providesUtilityService ?utilServ1 .  
	?utilServ1 ufokn_c:serves ?feature .
    ?feature rdf:type ufokn:FeatureAtRisk .
    FILTER(?utilAsset1 != ?feature)
}



### ServiceAreasContainFeatures ###
# Returns UtilityService and FeatureAtRisk in UtilityServiceArea
# Tried to merge all of this into a single property using a propertyChainAxiom
# Unable to make it work as the geo:sfIntersects does not appear to work in axioms, only in queries
# ufokn:hasRiskPointInverse was a construct created to try and make things work - it may not be needed further

PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>

SELECT ?service ?feature WHERE { 
    ?service ufokn_c:servesArea ?servicearea .
    ?servicearea geo:sfIntersects ?riskpoint .
    ?riskpoint ufokn:hasRiskPointInverse ?feature .
} ORDER BY ?service ?feature



### COUNT Utility Services ###
# Counts the number of each type of utility service in the graph

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>

SELECT ?type (COUNT(?serviceArea) as ?count) WHERE {
    ?serviceArea rdf:type ufokn_c:UtilityServiceArea .
    ?serviceArea ufokn_c:ofUtilityType ?type .
} GROUP BY ?type




### ProviderAssetServiceFeature
# Returns provider assets, the service they provide, and any features served P2P

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT ?provider ?asset ?service ?feature WHERE { 
	?asset ufokn_c:assetServesTC ?feature .
    ?feature rdf:type ufokn:FeatureAtRisk .
    ?asset ufokn_c:providesUtilityService ?service .
    ?service ufokn_c:providedByProvider ?provider .
} ORDER BY ?provider ?asset



### Cascade_by_areas ###
# A cascading query using UtilityServiceArea
#   Assumes first UtilityAsset serves others (not servesArea)
#   Two levels of areas (missing things that don't have two levels)

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>

SELECT ?utilAsset1 ?utilAsset2 ?utilAsset3 ?feature4 WHERE { 
    ?utilAsset1 rdf:type ufokn_c:UtilityAsset ;
                ufokn_c:providesUtilityService ?utilServ1 .  
    ?utilServ1 ufokn_c:serves ?utilAsset2.

    ?utilAsset2 rdf:type ufokn_c:UtilityAsset ;
                ufokn_c:providesUtilityService ?utilServ2 .  
    ?utilServ2 ufokn_c:servesArea ?utilArea2 .
    ?utilAsset3 rdf:type ufokn_c:UtilityAsset ;
              ufokn:hasRiskPoint ?RiskPoint3 .
    ?utilArea2 geo:sfIntersects ?RiskPoint3 .
    FILTER(?utilAsset3 != ?utilAsset2)
    FILTER(?utilAsset3 != ?utilAsset1)

    ?utilAsset3 ufokn_c:providesUtilityService ?utilServ3 .  
    ?utilServ3 ufokn_c:servesArea ?utilArea3 .
    ?feature4 rdf:type ufokn:FeatureAtRisk ;
              ufokn:hasRiskPoint ?RiskPoint4 .
    ?utilArea3 geo:sfIntersects ?RiskPoint4 .
    FILTER(?feature4 != ?utilAsset3)
    FILTER(?feature4 != ?utilAsset2)
    FILTER(?feature4 != ?utilAsset1)
}



### COUNT_FaR_predicate ###
# Counts the number of FeatureAtRisk in each UtilityServiceArea
# Uses the relation version of geo:sfIntersects
# Takes ~10 seconds on a dataset with about 83k FeatureAtRisk across 33 non-overlapping UtilityServiceArea

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>

SELECT ?serviceArea (COUNT(?serviceArea) as ?COUNT) WHERE {
    ?serviceArea rdf:type ufokn_c:UtilityServiceArea .
    ?feature ufokn:hasRiskPoint ?riskPoint.
    ?serviceArea geo:sfIntersects ?riskPoint.
} GROUP BY ?serviceArea



### COUNT_FaR_function ###
# Counts the number of FeatureAtRisk in each UtilityServiceArea
# Uses the function version of geof:sfIntersects
# Takes 35-40 seconds on a dataset with about 83k FeatureAtRisk across 33 non-overlapping UtilityServiceArea

PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX geof: <http://www.opengis.net/def/function/geosparql/>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>

SELECT ?serviceArea (COUNT(?serviceArea) as ?COUNT) WHERE {
    ?serviceArea rdf:type ufokn_c:UtilityServiceArea ;
                 geo:asWKT ?area.
    ?feature ufokn:hasRiskPoint ?riskPoint.
    ?riskPoint geo:asWKT ?point.
    FILTER(geof:sfIntersects(?area, ?point))
} GROUP BY ?serviceArea



### FaRInAssetArea ###
# Retrieves all FeatureAtRisk served in an electric utility asset's serviceArea
# Can filter for only assets that are flooded (when supported)

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>

SELECT ?eua ?feature WHERE { 
	?eua rdf:type ufokn_c:ElectricUtilityAsset;
#	      ufokn:hasFloodLevel "critical"^^xsd:string;
         ufokn_c:providesUtilityService ?utilServ.
    ?utilServ ufokn_c:servesArea ?serviceArea.
    ?feature ufokn:hasRiskPoint ?riskPoint.
    ?serviceArea geo:sfIntersects ?riskPoint
}




### FaRServedByUtilAsset ###
# Retrieves all FeatureAtRisk served by electric utility assets in a point-to-point relation
# Can filter for only assets that are flooded (when supported)

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT ?eua ?feature WHERE { 
	?eua rdf:type ufokn_c:ElectricUtilityAsset;
#		  ufokn:hasFloodLevel "critical"^^xsd:string;
    	 ufokn_c:providesUtilityService ?utilServ.
	?utilServ ufokn_c:serves ?feature.
    ?feature rdf:type ufokn:FeatureAtRisk.
}



### servesFeaturesInArea ###
# Retrieves each ufokn_c:UtilityService and returns all ufokn:FeatureAtRisk within the ufokn_c:UtilityServiceArea.

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>

SELECT ?utilityService ?feature WHERE { 
    ?utilityService rdf:type ufokn_c:UtilityService;
    				ufokn_c:servesArea ?utilityArea.
    ?feature rdf:type ufokn:FeatureAtRisk;
    		 ufokn:hasRiskPoint ?riskPoint.    
    ?utilityArea geo:sfIntersects ?riskPoint.
} 



### FeaturesInServiceAreas ###
# Retrieves each FaR with a Risk Point and indicates all service areas they belong to

PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>

SELECT ?feature ?serviceArea WHERE {
    ?serviceArea rdf:type ufokn_c:UtilityServiceArea .
    ?feature ufokn:hasRiskPoint ?riskPoint .
    ?serviceArea geo:sfIntersects ?riskPoint .
} ORDER BY ?feature ?serviceArea



### serves ###
# Retrieves each ufokn_c:UtilityService, its ufokn_c:UtilityType, each ufokn:FeatureOrRegionAtRisk it serves,
#     and the ufokn_c:UtilityAsset that provides the service.

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>

SELECT ?utilityService ?serviceType ?serves ?providedByAsset WHERE { 
    ?utilityService rdf:type ufokn_c:UtilityService;
    				ufokn_c:ofUtilityType ?serviceType;
    				ufokn_c:providedByUtilityAsset ?providedByAsset;
    				ufokn_c:serves ?serves.
} 



### UtilityProviders ###
# Returns all UtilityProvider and the UtilityService they provide

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>

SELECT ?provider ?service WHERE { 
	?provider rdf:type ufokn_c:UtilityProvider .
    ?service ufokn_c:providedByProvider ?provider .
}



### UtilityService ###
# Retrieves each ufokn_c:UtilityService, its ufokn_c:UtilityType, and the ufokn_c:UtilityAsset that provides the service

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>

SELECT ?utilityService ?serviceType ?providedByAsset WHERE { 
    ?utilityService rdf:type ufokn_c:UtilityService ;
    				ufokn_c:ofUtilityType ?serviceType ;
    				ufokn_c:providedByUtilityAsset ?providedByAsset .
} 



### UtilityAsset ###
# Retrieves all ufokn_c:UtilityAsset entries along with their ufokn_c:UtilityType and ufokn_c:UtilityService

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn_c: <http://schema.ufokn.org/utility-connection/v2/>

SELECT DISTINCT ?utilityAsset ?serviceType ?utilityService WHERE { 
    ?utilityAsset rdf:type ufokn_c:UtilityAsset ;
    			  ufokn_c:ofUtilityType ?serviceType ;
    			  ufokn_c:providesUtilityService ?utilityService .
} 



### hasMember_COUNTs ###
# Retrieves a COUNT of how many ufokn:IndividualFeatureAtRiskInCollection are in each ufokn:CollectionOfFeatures

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

SELECT ?collection (COUNT(?collection) as ?COUNT) WHERE { 
	?collection rdf:type ufokn:CollectionOfFeatures ;
    			ufokn:hasMember ?x .
} GROUP BY ?collection



### FaR_w-Address ###
# Results are the union of two sub-queries
#    One query works for anything with a unit number
#    The other query works for anything without a unit number
# There may be a better way using a property chain axiom?

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

SELECT ?feature ?st_add WHERE { 
    {
        SELECT DISTINCT ?feature ?st_add WHERE {
            ?feature rdf:type ufokn:FeatureAtRisk .
            ### Retrieves addresses for anything with a unit number.
            ?feature ufokn:hasAddress ?address.
            ?address ufokn:hasStreetAddress ?st_address;
                     ufokn:unitNumber ?u_num.
            ?st_address ufokn:streetNumber ?st_num;
                        ufokn:street ?street;
                        ufokn:city ?city;
                        ufokn:state ?state;
                        ufokn:postcode ?zip.
            BIND(CONCAT(STR(?st_num), STR(" "), STR(?street), STR(" "), STR(?u_num), STR(", "), STR(?city), STR(", "), STR(?state), STR("  "), STR(?zip)) as ?st_add).
        }
    }
    UNION
    {
        SELECT ?feature ?st_add WHERE {
            ?feature rdf:type ufokn:FeatureAtRisk .
            ### Retrieves addresses for anything that does not have a unit number
            ?feature ufokn:hasAddress ?address.
            ?address ufokn:streetNumber ?st_num;
                     ufokn:street ?street;
                     ufokn:city ?city;
                     ufokn:state ?state;
                     ufokn:postcode ?zip.
            BIND(CONCAT(STR(?st_num), STR(" "), STR(?street), STR(" "), STR(", "), STR(?city), STR(", "), STR(?state), STR("  "), STR(?zip)) as ?st_add).
        }
    }
} ORDER BY ?feature



### FaR-minus-IFaRiC ###
# A helper query for comparing parquet data against ttl data
# Returns all FeatureAtRisk except IndividualFeatureAtRiskInCollection

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

SELECT ?feature WHERE { 
	?feature rdf:type ufokn:FeatureAtRisk.
    MINUS { ?feature ufokn:isMemberOf ?x }.
}



### IFaRiC ###
# Retrieves all ufokn:IndividualFeatureAtRiskInCollection along with address information

PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?feature ?st_add WHERE {
	?feature rdf:type ufokn:IndividualFeatureAtRiskInCollection.
    ?feature ufokn:hasAddress ?address.
    ?address ufokn:hasStreetAddress ?st_address;
    		 ufokn:unitNumber ?u_num.
    ?st_address ufokn:streetNumber ?st_num;
    			ufokn:street ?street;
    			ufokn:city ?city;
    			ufokn:state ?state;
    			ufokn:postcode ?zip.
    BIND(CONCAT(str(?st_num), str(" "), str(?street), str(" "), str(?u_num), str(", "), str(?city), str(", "), str(?state), str("  "), str(?zip)) as ?st_add).
}



### CoF-alt ###
# Retrieves all ufokn:CollectionOfFeatures (alternate)

PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

SELECT ?feature WHERE {
  ?feature ufokn:hasMember ?unit.
} GROUP BY ?feature
HAVING (COUNT(DISTINCT ?unit) > 1)



### CoF ###
# Retrieves all ufokn:CollectionOfFeatures

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

SELECT DISTINCT ?collection WHERE { 
	?collection rdf:type ufokn:CollectionOfFeatures;
    			ufokn:hasMember ?ifaric.
} 



### IFaR_SFaR ###
# Attempts to retrieve all ufokn:IndividualFeatureAtRisk or all ufokn:StandaloneFeatureAtRisk (comment one out)
# Works as expected if the data file explicitly uses StandaloneFeatureAtRisk and IndividualFeatureAtRisk as appropriate

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

SELECT ?feature WHERE { 
    ?feature rdf:type ufokn:IndividualFeatureAtRisk.
#    ?feature rdf:type ufokn:StandaloneFeatureAtRisk.
} 



### FaR ###
# Retrieves all ufokn:FeatureAtRisk

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

SELECT ?feature WHERE { 
	?feature rdf:type ufokn:FeatureAtRisk.
}



### K-V_Pairs ###
# Retrieves all distinct key-value pairs

PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

SELECT DISTINCT ?key ?value WHERE { 
	?x ufokn:key ?key;
       ufokn:value ?value.
} ORDER BY ?key ?value



### Value_Count ###
# Retrieves all distinct values and the number of times they occur
# Easily adapted to do the same for keys

PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

SELECT ?val (COUNT(?val) as ?COUNT) WHERE { 
	?X ufokn:value ?val.
} GROUP BY ?val