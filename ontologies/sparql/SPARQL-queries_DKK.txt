# The queries below are in reverse order of how they were originally created
# Therefore, the most complex ones come first
# Note that some lines have been commented out of some queries
#    There may be two different queries that can be run by changing what is commented
#    There may be functionality that is not yet supported in the ontology



### enable-GeoSPARQL ###
# Enables the GeoSPARQL plugin in GraphDB so indexed predicate operations work

PREFIX geoSparql: <http://www.ontotext.com/plugins/geosparql#>
INSERT DATA { _:s geoSparql:enabled "true" . }



### ServiceAreasContainFeatures ###
# Returns UtilityService and FeatureAtRisk in UtilityServiceArea
# Tried to merge all of this into a single property using a propertyChainAxiom
# Unable to make it work as the geo:sfIntersects does not appear to work in axioms, only in queries
# ufokn:hasRiskPointInverse was a construct created to try and make things work - it may not be needed further

PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>

select ?service ?feature where { 
    ?service ufokn-c:servesArea ?servicearea .
    ?servicearea geo:sfIntersects ?riskpoint .
    ?riskpoint ufokn:hasRiskPointInverse ?feature .
} order by ?service ?feature



### assetServesTC-p2p ###
# Tests the new ufokn-c:assetServesTC transitive closure of ufokn-c:assetServes

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>

select ?utilAsset1 ?feature where { 
	?utilAsset1 ufokn-c:assetServesTC ?feature .
    ?feature rdf:type ufokn:FeatureAtRisk .
}



### assetServes-p2p ###
# Tests the new ufokn-c:assetServes propertyChainAxiom

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>

select ?utilAsset1 ?feature where { 
	?utilAsset1 ufokn-c:assetServes ?feature .
    ?feature rdf:type ufokn:FeatureAtRisk .
}



### count_FaR_predicate ###
# Counts the number of FeatureAtRisk in each UtilityServiceArea
# Uses the relation version of geo:sfIntersects
# Takes ~10 seconds on a dataset with about 83k FeatureAtRisk across 33 non-overlapping UtilityServiceArea

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>

SELECT ?serviceArea (count(?serviceArea) as ?count) WHERE {
    ?serviceArea rdf:type ufokn-c:UtilityServiceArea .
    ?feature ufokn:hasRiskPoint ?riskPoint.
    ?serviceArea geo:sfIntersects ?riskPoint.
} GROUP BY ?serviceArea



### count_FaR_function ###
# Counts the number of FeatureAtRisk in each UtilityServiceArea
# Uses the function version of geof:sfIntersects
# Takes 35-40 seconds on a dataset with about 83k FeatureAtRisk across 33 non-overlapping UtilityServiceArea

PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX geof: <http://www.opengis.net/def/function/geosparql/>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>

select ?serviceArea (count(?serviceArea) as ?count) where {
    ?serviceArea rdf:type ufokn-c:UtilityServiceArea ;
                 geo:asWKT ?area.
    ?feature ufokn:hasRiskPoint ?riskPoint.
    ?riskPoint geo:asWKT ?point.
    FILTER(geof:sfIntersects(?area, ?point))
} group by ?serviceArea



### ProviderAssetServiceFeature
# Returns provider assets, the service they provide, and any features served P2P

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

select ?provider ?asset ?service ?feature where { 
	?asset ufokn-c:assetServesTC ?feature .
    ?feature rdf:type ufokn:FeatureAtRisk .
    ?asset ufokn-c:providesUtilityService ?service .
    ?service ufokn-c:providedByProvider ?provider .
} order by ?provider ?asset



### Cascade_by_areas ###
# A cascading query using UtilityServiceArea
#   Assumes first UtilityAsset serves others (not servesArea)
#   Two levels of areas (missing things that don't have two levels)

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>

select distinct ?utilAsset1 ?utilAsset2 ?feature2 ?feature3 where { 
	?utilAsset1 rdf:type ufokn-c:UtilityAsset ;
#                ufokn:hasFloodLevel "critical"^^xsd:string ;
                ufokn-c:providesUtilityService ?utilServ1 .  
	?utilServ1 ufokn-c:serves ?utilAsset2 ;
			   ufokn-c:ofUtilityType ?utilType1 .
    
    ?utilAsset2 rdf:type ufokn-c:UtilityAsset ;
                ufokn-c:providesUtilityService ?utilServ2 .  
	?utilServ2 ufokn-c:servesArea ?utilArea2 ;
			   ufokn-c:ofUtilityType ?utilType2 .
    ?feature2 rdf:type ufokn:FeatureAtRisk ;
              ufokn:hasRiskPoint ?fRiskPoint2 .
    ?utilArea2 geo:sfIntersects ?fRiskPoint2 .
    FILTER(?feature2 != ?utilAsset2)
    FILTER(?feature2 != ?utilAsset1)
    
    ?feature2 rdf:type ufokn-c:UtilityAsset ;
              ufokn-c:providesUtilityService ?utilServ3 .  
	?utilServ3 ufokn-c:servesArea ?utilArea3 ;
			   ufokn-c:ofUtilityType ?utilType4 .
    ?feature3 rdf:type ufokn:FeatureAtRisk ;
              ufokn:hasRiskPoint ?fRiskPoint3 .
    ?utilArea3 geo:sfIntersects ?fRiskPoint3 .
    FILTER(?feature3 != ?feature2)
    FILTER(?feature3 != ?utilAsset2)
    FILTER(?feature3 != ?utilAsset1)
}



### Cascade! ###
# A cascading query: Asset1 provides service to Asset2 which provides service to features
# Superseded by ability to use assetServesTC
# Can filter for only assets that are flooded (when supported)
# Does not use the same design as in the May 2021 Utility Connectin Pattern presentation

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

select ?utilAsset1 ?utilAsset2 ?feature where { 
	?utilAsset1 rdf:type ufokn-c:UtilityAsset ;
#                ufokn:hasFloodLevel "critical"^^xsd:string ;
                ufokn-c:providesUtilityService ?utilServ1 .  
	?utilServ1 ufokn-c:serves ?utilAsset2 ;
			   ufokn-c:ofUtilityType ?utilType2 .
    ?utilAsset2 ufokn-c:providesUtilityService ?utilServ2 .
    ?utilServ2 ufokn-c:serves ?feature .
    ?feature rdf:type ufokn:FeatureAtRisk .
}



### FaRInAssetArea ###
# Retrieves all FeatureAtRisk served in an electric utility asset's serviceArea
# Can filter for only assets that are flooded (when supported)

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>

select ?eua ?feature where { 
	?eua rdf:type ufokn-c:ElectricUtilityAsset;
#	      ufokn:hasFloodLevel "critical"^^xsd:string;
         ufokn-c:providesUtilityService ?utilServ.
    ?utilServ ufokn-c:servesArea ?serviceArea.
    ?feature ufokn:hasRiskPoint ?riskPoint.
    ?serviceArea geo:sfIntersects ?riskPoint
}




### FaRServedByUtilAsset ###
# Retrieves all FeatureAtRisk served by electric utility assets in a point-to-point relation
# Can filter for only assets that are flooded (when supported)

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

select ?eua ?feature where { 
	?eua rdf:type ufokn-c:ElectricUtilityAsset;
#		  ufokn:hasFloodLevel "critical"^^xsd:string;
    	 ufokn-c:providesUtilityService ?utilServ.
	?utilServ ufokn-c:serves ?feature.
    ?feature rdf:type ufokn:FeatureAtRisk.
}



### servesFeaturesInArea ###
# Retrieves each ufokn-c:UtilityService and returns all ufokn:FeatureAtRisk within the ufokn-c:UtilityServiceArea.

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>

select ?utilityService ?feature where { 
    ?utilityService rdf:type ufokn-c:UtilityService;
    				ufokn-c:servesArea ?utilityArea.
    ?feature rdf:type ufokn:FeatureAtRisk;
    		 ufokn:hasRiskPoint ?riskPoint.    
    ?utilityArea geo:sfIntersects ?riskPoint.
} 



### FeaturesInServiceAreas ###
# Retrieves each FaR with a Risk Point and indicates all service areas they belong to


PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>

select ?feature ?serviceArea where {
    ?serviceArea rdf:type ufokn-c:UtilityServiceArea .
    ?feature ufokn:hasRiskPoint ?riskPoint .
    ?serviceArea geo:sfIntersects ?riskPoint .
}



### serves ###
# Retrieves each ufokn-c:UtilityService, its ufokn-c:UtilityType, each ufokn:FeatureOrRegionAtRisk it serves,
#     and the ufokn-c:UtilityAsset that provides the service.

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>

select ?utilityService ?serviceType ?serves ?providedByAsset where { 
    ?utilityService rdf:type ufokn-c:UtilityService;
    				ufokn-c:ofUtilityType ?serviceType;
    				ufokn-c:providedByUtilityAsset ?providedByAsset;
    				ufokn-c:serves ?serves.
} 



### UtilityProviders ###
# Returns all UtilityProvider and the UtilityService they provide

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>

select ?provider ?service where { 
	?provider rdf:type ufokn-c:UtilityProvider .
    ?service ufokn-c:providedByProvider ?provider .
}



### UtilityService ###
# Retrieves each ufokn-c:UtilityService, its ufokn-c:UtilityType, and the ufokn-c:UtilityAsset that provides the service

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>

select ?utilityService ?serviceType ?providedByAsset where { 
    ?utilityService rdf:type ufokn-c:UtilityService ;
    				ufokn-c:ofUtilityType ?serviceType ;
    				ufokn-c:providedByUtilityAsset ?providedByAsset .
} 



### UtilityAsset ###
# Retrieves all ufokn-c:UtilityAsset entries along with their ufokn-c:UtilityType and ufokn-c:UtilityService

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>

select distinct ?utilityAsset ?serviceType ?utilityService where { 
    ?utilityAsset rdf:type ufokn-c:UtilityAsset ;
    			  ufokn-c:ofUtilityType ?serviceType ;
    			  ufokn-c:providesUtilityService ?utilityService .
} 



### hasMember_counts ###
# Retrieves a count of how many ufokn:IndividualFeatureAtRiskInCollection are in each ufokn:CollectionOfFeatures

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

select ?collection (count(?collection) as ?count) where { 
	?collection rdf:type ufokn:CollectionOfFeatures ;
    			ufokn:hasMember ?x .
} group by ?collection



### FaR_w-Address ###
# Results are the union of two sub-queries
#    One query works for anything with a unit number
#    The other query works for anything without a unit number
# There may be a better way using a property chain axiom?

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

select ?feature ?st_add where { 
    {
        select distinct ?feature ?st_add where {
            ?feature rdf:type ufokn:FeatureAtRisk .
            ### Retrieves addresses for anything with a unit number.
            ?feature ufokn:hasAddress ?address.
            ?address ufokn:hasStreetAddress ?st_address;
                     ufokn:unitNumber ?u_num.
            ?st_address ufokn:streetNumber ?st_num;
                        ufokn:street ?street;
                        ufokn:city ?city;
                        ufokn:state ?state;
                        ufokn:postcode ?zip.
            BIND(concat(str(?st_num), str(" "), str(?street), str(" "), str(?u_num), str(", "), str(?city), str(", "), str(?state), str("  "), str(?zip)) as ?st_add).
        }
    }
    UNION
    {
        select ?feature ?st_add where {
            ?feature rdf:type ufokn:FeatureAtRisk .
            ### Retrieves addresses for anything that does not have a unit number
            ?feature ufokn:hasAddress ?address.
            ?address ufokn:streetNumber ?st_num;
                     ufokn:street ?street;
                     ufokn:city ?city;
                     ufokn:state ?state;
                     ufokn:postcode ?zip.
            BIND(concat(str(?st_num), str(" "), str(?street), str(" "), str(", "), str(?city), str(", "), str(?state), str("  "), str(?zip)) as ?st_add).
        }
    }
} order by ?feature



### FaR-minus-IFaRiC ###
# A helper query for comparing parquet data against ttl data
# Returns all FeatureAtRisk except IndividualFeatureAtRiskInCollection

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

select ?feature where { 
	?feature rdf:type ufokn:FeatureAtRisk.
    MINUS { ?feature ufokn:isMemberOf ?x }.
}



### IFaRiC ###
# Retrieves all ufokn:IndividualFeatureAtRiskInCollection along with address information

PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

select ?feature ?st_add where {
	?feature rdf:type ufokn:IndividualFeatureAtRiskInCollection.
    ?feature ufokn:hasAddress ?address.
    ?address ufokn:hasStreetAddress ?st_address;
    		 ufokn:unitNumber ?u_num.
    ?st_address ufokn:streetNumber ?st_num;
    			ufokn:street ?street;
    			ufokn:city ?city;
    			ufokn:state ?state;
    			ufokn:postcode ?zip.
    BIND(concat(str(?st_num), str(" "), str(?street), str(" "), str(?u_num), str(", "), str(?city), str(", "), str(?state), str("  "), str(?zip)) as ?st_add).
}



### CoF-alt ###
# Retrieves all ufokn:CollectionOfFeatures (alternate)

PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

select ?feature where {
  ?feature ufokn:hasMember ?unit.
}
group by ?feature
having (count(distinct ?unit) > 1)



### CoF ###
# Retrieves all ufokn:CollectionOfFeatures

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

select distinct ?collection where { 
	?collection rdf:type ufokn:CollectionOfFeatures;
    			ufokn:hasMember ?ifaric.
} 



### IFaR_SFaR ###
# Attempts to retrieve all ufokn:IndividualFeatureAtRisk or all ufokn:StandaloneFeatureAtRisk (comment one out)
# Works as expected if the data file explicitly uses StandaloneFeatureAtRisk and IndividualFeatureAtRisk as appropriate

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

select ?feature where { 
    ?feature rdf:type ufokn:IndividualFeatureAtRisk.
#    ?feature rdf:type ufokn:StandaloneFeatureAtRisk.
} 



### FaR ###
# Retrieves all ufokn:FeatureAtRisk

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

select ?feature where { 
	?feature rdf:type ufokn:FeatureAtRisk.
}



### K-V_Pairs ###
# Retrieves all distinct key-value pairs

PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

select distinct ?key ?value where { 
	?x ufokn:key ?key;
       ufokn:value ?value.
} order by ?key ?value



### Value_Count ###
# Retrieves all distinct values and the number of times they occur
# Easily adapted to do the same for keys

PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

select ?val (count(?val) as ?count) where { 
	?X ufokn:value ?val.
} group by ?val