# The queries below are in reverse order of how they were originally created
# Therefore, the most complex ones come first
# Note that some lines have been commented out of some queries
#    There may be two different queries that can be run by changing what is commented
#    There may be functionality that is not yet supported in the ontology



### assetServesTC-p2p ###
# Tests the new ufokn-c:assetServesTC transitive closure of ufokn-c:assetServes
# Works as expected

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

select ?utilAsset1 ?feature where { 
	?utilAsset1 ufokn-c:assetServesTC ?feature .
    ?feature rdf:type ufokn:FeatureAtRisk .
}



### assetServes-p2p ###
# Tests the new ufokn-c:assetServes propertyChainAxiom
# Works as expected

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

select ?utilAsset1 ?feature where { 
	?utilAsset1 ufokn-c:assetServes ?feature .
    ?feature rdf:type ufokn:FeatureAtRisk .
}



### enable-GeoSPARQL ###
# Enables the GeoSPARQL plugin in GraphDB so indexed predicate operations work

PREFIX geoSparql: <http://www.ontotext.com/plugins/geosparql#>
INSERT DATA { _:s geoSparql:enabled "true" . }



### count_FaR_predicate ###
# Counts the number of FeatureAtRisk in each UtilityServiceArea
# Uses the relation version of geo:sfContains
# Works as expected
# Takes ~10 seconds on a dataset with about 83k FeatureAtRisk across 33 UtilityServiceArea

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>

SELECT ?serviceArea (count(?serviceArea) as ?count) WHERE {
    ?serviceArea rdf:type ufokn-c:UtilityServiceArea .
    ?feature ufokn:hasRiskPoint ?riskPoint.
    ?serviceArea geo:sfContains ?riskPoint.
} GROUP BY ?serviceArea



### count_FaR_function ###
# Counts the number of FeatureAtRisk in each UtilityServiceArea
# Uses the function version of geof:sfContains
# Works as expected
# Takes 35-40 seconds on a dataset with about 83k FeatureAtRisk across 33 UtilityServiceArea

PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX geof: <http://www.opengis.net/def/function/geosparql/>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>

select ?serviceArea (count(?serviceArea) as ?count) where {
    ?serviceArea rdf:type ufokn-c:UtilityServiceArea ;
                 geo:asWKT ?area.
    ?feature ufokn:hasRiskPoint ?riskPoint.
    ?riskPoint geo:asWKT ?point.
    FILTER(geof:sfContains(?area, ?point))
} group by ?serviceArea



### Cascade_by_areas ###
# A cascading query using UtilityServiceArea
#   Assumes first UtilityAsset serves others (not servesArea)
#   Two levels of areas (missing things that don't have two levels)
# Appears to work as expected

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX geof: <http://www.opengis.net/def/function/geosparql/>
PREFIX ufokn-geo: <http://schema.ufokn.org/geo/v2/>

select ?utilAsset1 ?utilAsset2 ?feature2 ?feature3 where { 
	?utilAsset1 rdf:type ufokn-c:UtilityAsset ;
#                ufokn:hasFloodLevel "critical"^^xsd:string ;
                ufokn-c:providesUtilityService ?utilServ1 .  
	?utilServ1 ufokn-c:serves ?utilAsset2 ;
			   ufokn-c:ofUtilityType ?utilType1 .
    
    ?utilAsset2 rdf:type ufokn-c:UtilityAsset ;
                ufokn-c:providesUtilityService ?utilServ2 .  
	?utilServ2 ufokn-c:servesArea ?utilArea2 ;
			   ufokn-c:ofUtilityType ?utilType2 .
    ?utilArea2 ufokn-geo:hasWktGeometry ?area2 .
    ?feature2 rdf:type ufokn:FeatureAtRisk ;
              ufokn:hasRiskPoint ?fRiskPoint2 .
    ?fRiskPoint2 ufokn-geo:hasWktGeometry ?fPoint2 .
    FILTER(geof:sfWithin(?fPoint2, ?area2))
    FILTER(?feature2 != ?utilAsset2)
    FILTER(?feature2 != ?utilAsset1)
    
    ?feature2 rdf:type ufokn-c:UtilityAsset ;
              ufokn-c:providesUtilityService ?utilServ3 .  
	?utilServ3 ufokn-c:servesArea ?utilArea3 ;
			   ufokn-c:ofUtilityType ?utilType4 .
    ?utilArea3 ufokn-geo:hasWktGeometry ?area3 .
    ?feature3 rdf:type ufokn:FeatureAtRisk ;
              ufokn:hasRiskPoint ?fRiskPoint3 .
    ?fRiskPoint3 ufokn-geo:hasWktGeometry ?fPoint3 .
    FILTER(geof:sfWithin(?fPoint3, ?area3))
    FILTER(?feature3 != ?feature2)
    FILTER(?feature3 != ?utilAsset2)
    FILTER(?feature3 != ?utilAsset1)
}



### Cascade! ###
# A cascading query: Asset1 provides service to Asset2 which provides service to Asset3 which provides service to features
# Can filter for only assets that are flooded (when supported)
# Does not use the same design as in the May 2021 Utility Connectin Pattern presentation
# Works as expected

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

select ?utilAsset1 ?utilAsset2 ?utilAsset3 ?feature where { 
	?utilAsset1 rdf:type ufokn-c:UtilityAsset ;
#                ufokn:hasFloodLevel "critical"^^xsd:string ;
                ufokn-c:providesUtilityService ?utilServ1 .  
	?utilServ1 ufokn-c:serves ?utilAsset2 ;
			   ufokn-c:ofUtilityType ?utilType2 .
    ?utilAsset2 ufokn-c:providesUtilityService ?utilServ2 .
    ?utilServ2 ufokn-c:serves ?utilAsset3 ;
               ufokn-c:ofUtilityType ?utilType3.
	?utilAsset3 ufokn-c:providesUtilityService ?utilServ3 .
    ?utilServ3 ufokn-c:serves ?feature .
    ?feature rdf:type ufokn:FeatureAtRisk .
}



### FaRInAssetArea ###
# Retrieves all features at risk served in an electric utility asset's service area
# Can filter for only assets that are flooded (when supported)
# Works as expected

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>

select ?eua ?feature where { 
	?eua rdf:type ufokn-c:ElectricUtilityAsset;
#	      ufokn:hasFloodLevel "critical"^^xsd:string;
         ufokn-c:providesUtilityService ?utilServ.
    ?utilServ ufokn-c:servesArea ?serviceArea.
    ?feature ufokn:hasRiskPoint ?riskPoint.
    ?serviceArea geo:sfContains ?riskPoint
}




### FaRServedBy ###
# Retrieves all features at risk served by electric utility assets
# Can filter for only assets that are flooded (when supported)
# Works as expected

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

select ?eua ?feature where { 
	?eua rdf:type ufokn-c:ElectricUtilityAsset;
#		  ufokn:hasFloodLevel "critical"^^xsd:string;
    	 ufokn-c:providesUtilityService ?utilServ.
	?utilServ ufokn-c:serves ?feature.
    ?feature rdf:type ufokn:FeatureAtRisk.
}



### servesArea ###
# Retrieves each ufokn-c:UtilityService and returns all ufokn:FeatureAtRisk within the ufokn-c:UtilityServiceArea.
# Works as expected.

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>

select ?utilityService ?feature where { 
    ?utilityService rdf:type ufokn-c:UtilityService;
    				ufokn-c:servesArea ?utilityArea.
    ?feature rdf:type ufokn:FeatureAtRisk;
    		 ufokn:hasRiskPoint ?riskPoint.    
    ?utilityArea geo:sfContains ?riskPoint.
} 



### FaR_in_serviceArea ###
# Works through all service areas and retrieves all FaR with a Risk Point in each area
# Works as expected (but need to download to get the full results with a large dataset)
# Uses the predicate form of sfContains
# Same results as FeaturesInServiceAreas below

PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>

select ?feature ?serviceArea where {
    ?serviceArea rdf:type ufokn-c:UtilityServiceArea .
    ?feature ufokn:hasRiskPoint ?riskPoint.
    ?serviceArea geo:sfContains ?riskPoint.
}



### FeaturesInServiceAreas ###
# Retrieves each FaR with a Risk Point and indicates all service areas they belong to
# Uses the function form of sfContains
# Works as expected
#    May need to replace ufokn-geo:hasWktGeometry with geo:asWKT depending on how data is coded

PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>
PREFIX ufokn-geo: <http://schema.ufokn.org/geo/v2/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX geof: <http://www.opengis.net/def/function/geosparql/>

select ?feature ?serviceArea where {
    ?feature ufokn:hasRiskPoint ?riskPoint.
    ?riskPoint ufokn-geo:hasWktGeometry ?point.
    ?serviceArea rdf:type ufokn-c:UtilityServiceArea;
    			 ufokn-geo:hasWktGeometry ?area.
    FILTER(geof:sfContains(?area, ?point))
}



### serves ###
# Retrieves each ufokn-c:UtilityService, its ufokn-c:UtilityType, each ufokn:FeatureOrRegionAtRisk it serves,
#     and the ufokn-c:UtilityAsset that provides the service.
# Works as expected.

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>

select ?utilityService ?serviceType ?serves ?providedByAsset where { 
    ?utilityService rdf:type ufokn-c:UtilityService;
    				ufokn-c:ofUtilityType ?serviceType;
    				ufokn-c:providedByUtilityAsset ?providedByAsset;
    				ufokn-c:serves ?serves.
} 



### UtilityService ###
# Retrieves each ufokn-c:UtilityService, its ufokn-c:UtilityType, and the ufokn-c:UtilityAsset that provides the service
# Works as expected.

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>

select ?utilityService ?serviceType ?providedByAsset where { 
    ?utilityService rdf:type ufokn-c:UtilityService.
    				ufokn-c:ofUtilityType ?serviceType;
    				ufokn-c:providedByUtilityAsset ?providedByAsset.
} 



### UtilityAsset ###
# Retrieves all ufokn-c:UtilityAsset entries along with their ufokn-c:UtilityType and ufokn-c:UtilityService
# Works as expected.

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX ufokn-c: <http://schema.ufokn.org/utility-connection/v2/>

select distinct ?utilityAsset ?serviceType ?utilityService where { 
    ?utilityAsset rdf:type ufokn-c:UtilityAsset.
    			  ufokn-c:ofUtilityType ?serviceType;
    			  ufokn-c:providesUtilityService ?utilityService.
} 



### hasMember_counts ###
# Retrieves a count of how many ufokn:IndividualFeatureAtRiskInCollection are in each ufokn:CollectionOfFeatures
# Works as expected

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

select ?collection (count(?collection) as ?count) where { 
	?collection rdf:type ufokn:CollectionOfFeatures.
    			ufokn:hasMember ?x.
} group by ?collection



### FaR_w-Address ###
# Retrieves all ufokn:FeatureAtRisk and attempts to retrieve address information for each
# Each part works as exected (see notes below)
# Need to create a single query that pulls both simultaneously
# Can the second query be simplified using the proposed owl:propertyChainAxiom?

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

select ?feature ?st_add where { 
	?feature rdf:type ufokn:FeatureAtRisk.
    
    ### Retrieves addresses for anything that does not have a unit number
#    ?feature ufokn:hasAddress ?address.
#    ?address ufokn:streetNumber ?st_num;
#    		 ufokn:street ?street;
#    		 ufokn:city ?city;
#    		 ufokn:state ?state;
#    		 ufokn:postcode ?zip.
#    BIND(concat(str(?st_num), str(" "), str(?street), str(" "), str(", "), str(?city), str(", "), str(?state), str("  "), str(?zip)) as ?st_add).
    
    ### Retrieves addresses for anything with a unit number.
    ?feature ufokn:hasAddress ?address.
    ?address ufokn:hasStreetAddress ?st_address;
    		 ufokn:unitNumber ?u_num.
    ?st_address ufokn:streetNumber ?st_num;
    			ufokn:street ?street;
    			ufokn:city ?city;
    			ufokn:state ?state;
    			ufokn:postcode ?zip.
    BIND(concat(str(?st_num), str(" "), str(?street), str(" "), str(?u_num), str(", "), str(?city), str(", "), str(?state), str("  "), str(?zip)) as ?st_add).
}



### FaR-minus-IFaRiC ###
# A helper query for comparing parquet data against ttl data

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

select ?feature where { 
	?feature rdf:type ufokn:FeatureAtRisk.
    MINUS { ?feature ufokn:isMemberOf ?x }.
}



### IFaRiC ###
# Retrieves all ufokn:IndividualFeatureAtRiskInCollection along with address information
# Works as expected (mostly)
#    Returns 1921 entries on IFaRiC hasAddress and Address hasStreetAddress & unitNumber (this is the expected number)
#    Returns 8 more entries on streetNumber
#    Returns 25 more entries on street
# Did not retrieve any ufokn:IndividualFeatureAtRiskInCollection after 6/27/22 ufokn-core update
#    hasMember and isMemberOf require range and domain updates, respectively

PREFIX ufokn: <http://schema.ufokn.org/core/v2/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

select ?feature ?st_add where {
	?feature rdf:type ufokn:IndividualFeatureAtRiskInCollection.
    ?feature ufokn:hasAddress ?address.
    ?address ufokn:hasStreetAddress ?st_address;
    		 ufokn:unitNumber ?u_num.
    ?st_address ufokn:streetNumber ?st_num;
    			ufokn:street ?street;
    			ufokn:city ?city;
    			ufokn:state ?state;
    			ufokn:postcode ?zip.
    BIND(concat(str(?st_num), str(" "), str(?street), str(" "), str(?u_num), str(", "), str(?city), str(", "), str(?state), str("  "), str(?zip)) as ?st_add).
}



### CoF-alt ###
# Retrieves all ufokn:CollectionOfFeatures (alternate)
# Works as expected

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

select ?feature where {
  ?feature ufokn:hasMember ?unit.
}
group by ?feature
having (count(distinct ?unit) > 1)



### CoF ###
# Retrieves all ufokn:CollectionOfFeatures
# Works as expected

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

select distinct ?collection where { 
	?collection rdf:type ufokn:CollectionOfFeatures;
    			ufokn:hasMember ?ifaric.
} 



### IFaR_SFaR ###
# Attempts to retrieve all ufokn:IndividualFeatureAtRisk or all ufokn:StandaloneFeatureAtRisk (comment one out)
# Does not retrieve ufokn:StandaloneFeatureAtRisk unless explicitly coded as such in data
# Does not retrieve ufokn:IndividualFeatureAtRisk unless explicilty coded as such in data
#    Does retreve ufokn:IndividualFeatureAtRiskInCollection (because range of hasMember / domain of isMemberOf)

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

select ?feature where { 
    ?feature rdf:type ufokn:IndividualFeatureAtRisk.
#    ?feature rdf:type ufokn:StandaloneFeatureAtRisk.
} 



### FaR ###
# Retrieves all ufokn:FeatureAtRisk
# Works as expected

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

select ?feature where { 
	?feature rdf:type ufokn:FeatureAtRisk.
}



### K-V_Pairs ###
# Retrieves all distinct key-value pairs

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

select distinct ?key ?value where { 
	?x ufokn:key ?key;
       ufokn:value ?value.
} order by ?key ?value



### Value_Count ###
# Retrieves all distinct values and the number of times they occur
# Easily adapted to do the same for keys

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ufokn: <http://schema.ufokn.org/core/v2/>

select ?val (count(?val) as ?count) where { 
	?X ufokn:value ?val.
} group by ?val
